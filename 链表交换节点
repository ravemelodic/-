节点交换 1-2-3-4变为2-1-4-3  前提：不能是值交换，只能是节点交换(指针指向改变)
//思路：https://programmercarl.com/0024.%E4%B8%A4%E4%B8%A4%E4%BA%A4%E6%8D%A2%E9%93%BE%E8%A1%A8%E4%B8%AD%E7%9A%84%E8%8A%82%E7%82%B9.html#%E6%80%9D%E8%B7%AF
//leetcode链接：https://leetcode.cn/problems/swap-nodes-in-pairs/
typedef struct mylist
{
	int data;
	mylist* next;
}mylist;

//此处省略主程序(类似leetcode)
//常规while迭代
mylist* changelist(mylist* head)  //此处的head是有数据的，1-2-3-4 head->val=1
{
	mylist* dummy_node = (mylist*)malloc(sizeof(mylist));  //dummy_node作为在head前的虚拟头节点
	dummy_node->next = head;
	mylist* leftindex,*rightindex;  //双指针法
	leftindex = dummy_node;
	rightindex = head;
	while (leftindex && rightindex && rightindex->next)
	{
		leftindex->next = rightindex->next; //指向节点2
		rightindex->next = leftindex->next->next; //节点1指向节点3
		leftindex->next->next = rightindex; //节点2指向节点1
		//上面完成一次1节点与2节点的调换
		//现在节点顺序是 dummy_node->2->1->3->4,如果需要3，4交换那么需要利用3前面的节点1
		leftindex = rightindex;  //让left代替right
		rightindex = leftindex->next;  //3节点作为right，然后重新循环
	}
	return dummy_node->next; //返回链表头节点为虚拟头节点的下一个节点
	free(dummy_node);
}
//递归法
mylist* returnbacklist(mylist* head)
{
	mylist* new_head;
	new_head = head->next;
	if (!head || !head->next)  //当head=NULL或者head->next=NULL时返回head以停止递归
		return head;
	head->next = returnbacklist(new_head->next); //以1-2-3-4为例子其根本是两个节点的交换作为一次循环，即12一次，34一次  首先1指向一个递归处 然后2指向1，目前是2-1-？-？ 
	new_head->next = head;                       //然后看递归里，节点3的地址对应递归函数中的新head，即head=节点3 ，new_head=节点4，重复一样的 节点3->next指向下一个递归，4指向3然后返回4使得1指向4，目前是2-1-4-3-？
	                                            //然后继续递归，这次new_head->next是NULL所以执行if条件中的命令，返回NULL，所以最后是2-1-4-3-NULL
	return new_head;
}
