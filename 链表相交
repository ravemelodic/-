//面试题 链表相交
//leetcode链接：https://leetcode.cn/problems/intersection-of-two-linked-lists-lcci/
 struct ListNode {
    int val;
     struct ListNode *next;
  };
  
//输入intersectval=8,listA=[4,1,8,4,5],listB=[5,0,1,8,4,5] skipA=2,skipB=3  //skip为两个链表除去相同部分剩下的部分的链表长度分别为2,3
struct ListNode* getIntersectionNode(struct ListNode* headA, struct ListNode* headB) 
{
	int gap,a,b,intersected=0;
	ListNode* tmp1, * tmp2;
	tmp1 = headA;
	tmp2 = headB;
	while (tmp1)   //获取链表A的长度
	{
		tmp1 = tmp1->next;
		a++;
	}
	while (tmp2)  //获取链表B的长度
	{
		tmp2 = tmp2->next;
		b++;
	}
	if (a > b)  
	{
		gap = a - b;
		tmp1 = headA; tmp2 = headB;   //tmp1对应长的，tmp2对应短的
	}
	else if (a < b)
	{
		gap = b - a;
		tmp1 = headB, tmp2 = headA;//同上
	}
	while (gap--)
	{
		tmp1 = tmp1->next; //前面让tmp1指向长的链表头节点其实变相让两个链表尾部对齐，然后通过gap获取A和B头节点到相交前一个节点
	}
	while (tmp1&&tmp2)
	{
		if (tmp1->val == tmp2->val)
			return tmp1; //获取第一个A与B值相同的节点(当然获取了tmp1自然也获取了tmp1后面所有节点的值，但是在主函数只要输出tmp1目前的这个首节点便可)
			tmp1 = tmp1->next;
			tmp2 = tmp2->next;
	}
}
